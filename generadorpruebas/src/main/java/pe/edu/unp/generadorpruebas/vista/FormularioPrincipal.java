/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package pe.edu.unp.generadorpruebas.vista;

import java.awt.HeadlessException;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.lang.reflect.Method;
import java.util.List;
import javax.swing.DefaultListModel;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import org.apache.commons.io.FilenameUtils;
import org.apache.log4j.Logger;
import org.jfree.ui.RefineryUtilities;
import org.junit.runner.Result;
import org.junit.runner.notification.Failure;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;
import pe.edu.unp.generadorpruebas.exception.CompilacionException;
import pe.edu.unp.generadorpruebas.exception.EjecucionPruebaException;
import pe.edu.unp.generadorpruebas.exception.GeneradorException;
import pe.edu.unp.generadorpruebas.exception.ModeladoException;
import pe.edu.unp.generadorpruebas.modelo.CasoDePrueba;
import pe.edu.unp.generadorpruebas.modelo.Clase;
import pe.edu.unp.generadorpruebas.modelo.Metodo;
import pe.edu.unp.generadorpruebas.modelo.Prueba;
import pe.edu.unp.generadorpruebas.modelo.RecursoJava;
import pe.edu.unp.generadorpruebas.servicio.BusquedaSolucionesServicio;
import pe.edu.unp.generadorpruebas.servicio.CompilacionServicio;
import pe.edu.unp.generadorpruebas.servicio.ModeladoServicio;
import pe.edu.unp.generadorpruebas.servicio.PruebaServicio;
import pe.edu.unp.generadorpruebas.util.Constantes;
import pe.edu.unp.generadorpruebas.util.FolderFileFilter;
import pe.edu.unp.generadorpruebas.util.GeneradorUtil;
import pe.edu.unp.generadorpruebas.util.JavaFileFilter;
import pe.edu.unp.generadorpruebas.util.ResultadoComando;

@Component
public class FormularioPrincipal extends javax.swing.JFrame {

    private Logger logger = Logger.getLogger(getClass());

    @Autowired
    private CompilacionServicio compilacionServicio;

    @Autowired
    private ModeladoServicio modeladoServicio;

    @Autowired
    private PruebaServicio pruebaServicio;

    @Autowired
    private BusquedaSolucionesServicio busquedaSolucionesServicio;

    /**
     * Creates new form FormularioPrincipal
     */
    public FormularioPrincipal() {
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
//            LOGGER.error(ex, ex);
            ex.printStackTrace();
        }
        initComponents();
        limpiarFormulario();
        RefineryUtilities.centerFrameOnScreen(this);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnEjecutar = new javax.swing.JButton();
        btnCancelar = new javax.swing.JButton();
        jtbPanelTabs = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        txtNombreClase = new javax.swing.JTextField();
        jScrollPane2 = new javax.swing.JScrollPane();
        txtCodigo = new javax.swing.JTextArea();
        txtNombreMetodo = new javax.swing.JTextField();
        btnSeleccionarClase = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        txtCarpetaArchivos = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jlListaArchivos = new javax.swing.JList<>();
        btnSeleccionarCarpetaArchivos = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jpbBarraProgreso = new javax.swing.JProgressBar();
        jLabel3 = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jmArchivo = new javax.swing.JMenu();
        jmiConfigurar = new javax.swing.JMenuItem();
        jmiSeleccionar = new javax.swing.JMenuItem();
        jmiGuardar = new javax.swing.JMenuItem();
        jmiCargar = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        jmiAcercaDe = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Generador de casos de pruebas");
        setMinimumSize(new java.awt.Dimension(795, 510));

        btnEjecutar.setText("Ejecutar");
        btnEjecutar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEjecutarActionPerformed(evt);
            }
        });

        btnCancelar.setText("Cancelar");
        btnCancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelarActionPerformed(evt);
            }
        });

        jLabel1.setText("Clase:");

        jLabel2.setText("MÃ©todo:");

        txtNombreClase.setEditable(false);
        txtNombreClase.setText("jTextField1");

        txtCodigo.setEditable(false);
        txtCodigo.setColumns(20);
        txtCodigo.setRows(5);
        jScrollPane2.setViewportView(txtCodigo);

        txtNombreMetodo.setEditable(false);
        txtNombreMetodo.setText("jTextField2");

        btnSeleccionarClase.setText("...");
        btnSeleccionarClase.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSeleccionarClaseActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 750, Short.MAX_VALUE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addComponent(jLabel1))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtNombreMetodo)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(txtNombreClase)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnSeleccionarClase, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(txtNombreClase, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnSeleccionarClase))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(txtNombreMetodo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 329, Short.MAX_VALUE)
                .addContainerGap())
        );

        jtbPanelTabs.addTab("Prueba individual", jPanel1);

        txtCarpetaArchivos.setEditable(false);
        txtCarpetaArchivos.setText("jTextField1");

        jLabel4.setText("Carpeta");

        jlListaArchivos.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        jScrollPane1.setViewportView(jlListaArchivos);

        btnSeleccionarCarpetaArchivos.setText("...");
        btnSeleccionarCarpetaArchivos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSeleccionarCarpetaArchivosActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel4)
                        .addGap(18, 18, 18)
                        .addComponent(txtCarpetaArchivos, javax.swing.GroupLayout.DEFAULT_SIZE, 660, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnSeleccionarCarpetaArchivos, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(2, 2, 2)))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(txtCarpetaArchivos, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnSeleccionarCarpetaArchivos))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 355, Short.MAX_VALUE)
                .addContainerGap())
        );

        jtbPanelTabs.addTab("Carpeta archivos", jPanel2);

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 770, Short.MAX_VALUE)
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 411, Short.MAX_VALUE)
        );

        jtbPanelTabs.addTab("Proyecto maven", jPanel3);

        jpbBarraProgreso.setMaximum(6);

        jLabel3.setText("Progreso:");

        jmArchivo.setText("Archivo");

        jmiConfigurar.setText("Configurar...");
        jmiConfigurar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jmiConfigurarActionPerformed(evt);
            }
        });
        jmArchivo.add(jmiConfigurar);

        jmiSeleccionar.setText("Seleccionar archivo...");
        jmiSeleccionar.setEnabled(false);
        jmiSeleccionar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jmiSeleccionarActionPerformed(evt);
            }
        });
        jmArchivo.add(jmiSeleccionar);

        jmiGuardar.setText("Guardar");
        jmiGuardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jmiGuardarActionPerformed(evt);
            }
        });
        jmArchivo.add(jmiGuardar);

        jmiCargar.setText("Cargar");
        jmiCargar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jmiCargarActionPerformed(evt);
            }
        });
        jmArchivo.add(jmiCargar);

        jMenuBar1.add(jmArchivo);

        jMenu2.setText("Ayuda");

        jmiAcercaDe.setText("Acerca de...");
        jMenu2.add(jmiAcercaDe);

        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnCancelar)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnEjecutar)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jtbPanelTabs)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jpbBarraProgreso, javax.swing.GroupLayout.PREFERRED_SIZE, 297, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jpbBarraProgreso, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jtbPanelTabs)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnCancelar)
                    .addComponent(btnEjecutar))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnEjecutarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEjecutarActionPerformed
        (new Thread(() -> {
            switch (jtbPanelTabs.getSelectedIndex()) {
                case 0:
                    ejecutarPruebasDeArchivoUnico();
                    break;
                case 1:
                    ejecutarPruebasDeCarpetaArchivos();
                    break;
            }
        })).start();
    }//GEN-LAST:event_btnEjecutarActionPerformed

    private void jmiCargarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jmiCargarActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jmiCargarActionPerformed

    private void jmiGuardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jmiGuardarActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jmiGuardarActionPerformed

    private void jmiConfigurarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jmiConfigurarActionPerformed
        ConfigurarDialog dialog = new ConfigurarDialog(this, Boolean.TRUE);
        dialog.setVisible(true);
    }//GEN-LAST:event_jmiConfigurarActionPerformed

    private void btnCancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelarActionPerformed
        int confirm;
        confirm = JOptionPane.showConfirmDialog(this, "Si cancela los datos no guardados se perderan, Â¿esta seguro de cancelar?", "Cancelar", JOptionPane.YES_NO_OPTION);
        if (confirm == JOptionPane.YES_OPTION) {
            limpiarFormulario();
        }
    }//GEN-LAST:event_btnCancelarActionPerformed

    private void jmiSeleccionarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jmiSeleccionarActionPerformed

    }//GEN-LAST:event_jmiSeleccionarActionPerformed

    private void btnSeleccionarClaseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSeleccionarClaseActionPerformed
        JFileChooser chooser;
        int eleccion;
        chooser = new JFileChooser();
        chooser.setFileFilter(new JavaFileFilter());
        eleccion = chooser.showOpenDialog(this);
        if (eleccion == JFileChooser.APPROVE_OPTION) {
            procesarArchivoSeleccionado(chooser.getSelectedFile());
        }
    }//GEN-LAST:event_btnSeleccionarClaseActionPerformed

    private void btnSeleccionarCarpetaArchivosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSeleccionarCarpetaArchivosActionPerformed
        JFileChooser chooser;
        int eleccion;
        chooser = new JFileChooser();
        chooser.setFileFilter(new FolderFileFilter());
        chooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        eleccion = chooser.showOpenDialog(this);
        if (eleccion == JFileChooser.APPROVE_OPTION) {
            procesarCarpetaArchivosSeleccionada(chooser.getSelectedFile());
        }
    }//GEN-LAST:event_btnSeleccionarCarpetaArchivosActionPerformed

    private boolean ejecutarPruebasDeCarpetaArchivos() {
        List<CasoDePrueba> solucionesOptimas;
        ResultadoComando resultadoPruebas;
        String rutaCarpeta, rutaArchivo2, nombreClase, nombreMetodo;
        RecursoJava proyecto;
        Result result;
        Metodo metodo;
        Prueba prueba;
        File carpeta, listaArchivos[];
        List<Method> metodosClase;

        rutaCarpeta = txtCarpetaArchivos.getText();
        carpeta = new File(rutaCarpeta);
        listaArchivos = carpeta.listFiles((File pathname) -> {
            return pathname.getName().endsWith(Constantes.EXTENSION_JAVA);
        });

        jpbBarraProgreso.setValue(0);
        jpbBarraProgreso.setMaximum(obtenerMaximo(listaArchivos, rutaCarpeta));
        System.out.println("maximun " + jpbBarraProgreso.getMaximum());
        for (File javaFile : listaArchivos) {
            rutaArchivo2 = javaFile.getAbsolutePath();
            nombreClase = FilenameUtils.removeExtension(javaFile.getName());
            proyecto = modeladoServicio.obtenerProyecto(rutaArchivo2);
            jpbBarraProgreso.setValue(jpbBarraProgreso.getValue() + 1);
            //1.- compilacion
            if (!compilar(proyecto)) {
                jpbBarraProgreso.setValue(0);
                return false;
            }

            //OBTENER LOS METODOS
            try {
                metodosClase = modeladoServicio.obtenerMetodosDeClaseEjecucion(rutaCarpeta, nombreClase);
            } catch (ModeladoException ex) {
                logger.error(ex, ex);
                JOptionPane.showMessageDialog(this, ex.getMessage());
                jpbBarraProgreso.setValue(0);
                return false;
            }
            for (Method method : metodosClase) {
                nombreMetodo = method.getName();
                //2.- modelado
                metodo = validacionMetodo(proyecto, nombreMetodo);
                jpbBarraProgreso.setValue(jpbBarraProgreso.getValue() + 1);
                if (metodo == null) {
                    jpbBarraProgreso.setValue(0);
                    return false;
                }
                //3.- busqueda de soluciones optimas
                solucionesOptimas = busquedaSolucionesServicio.buscarSolucionesOptimas(metodo);
                jpbBarraProgreso.setValue(jpbBarraProgreso.getValue() + 1);
                //4.- Creacion de pruebas
                prueba = pruebaServicio.crearPruebas(metodo, solucionesOptimas);
                jpbBarraProgreso.setValue(jpbBarraProgreso.getValue() + 1);
                //5.- Ejecucion de pruebas
                resultadoPruebas = resultadoPruebas(proyecto, prueba);
                jpbBarraProgreso.setValue(jpbBarraProgreso.getValue() + 1);
                if (resultadoPruebas == null) {
                    jpbBarraProgreso.setValue(0);
                    return false;
                }
                if (!resultadoPruebas.esResultadoExito()) {
                    JOptionPane.showMessageDialog(this, "Ha fallado la ejecuciÃ³n de las pruebas.\n" + resultadoPruebas.getGobbler().getResultadoErrorComando());
                    jpbBarraProgreso.setValue(0);
                    return false;
                }
                //6.- Resultados
                result = obtenerResultadoDePruebasDeArchivo();
                jpbBarraProgreso.setValue(jpbBarraProgreso.getValue() + 1);
                if (result == null) {
                    jpbBarraProgreso.setValue(0);
                    return false;
                }
                System.out.println("=============================");
                System.out.println(jpbBarraProgreso.getValue());
                System.out.println("FC: " + result.getFailureCount());
                System.out.println("IC: " + result.getIgnoreCount());
                System.out.println("RC: " + result.getRunCount());
                System.out.println("RT: " + result.getRunTime());
                System.out.println("WS: " + result.wasSuccessful());
                for (Failure failure : result.getFailures()) {
                    System.out.println("MSS: " + failure.getMessage());
                    System.out.println("FTH: " + failure.getTestHeader());
                    System.out.println("FDC: " + failure.getDescription());
                }
            }
        }
        System.out.println(jpbBarraProgreso.getValue());
        return true;
    }

    private boolean ejecutarPruebasDeArchivoUnico() throws HeadlessException {
        List<CasoDePrueba> solucionesOptimas;
        ResultadoComando resultadoPruebas;
        String rutaArchivo, nombreMetodo;
        RecursoJava proyecto;
        Result result;
        Metodo metodo;
        Prueba prueba;

        jpbBarraProgreso.setValue(0);
        jpbBarraProgreso.setMaximum(6);

        rutaArchivo = txtNombreClase.getText();
        nombreMetodo = txtNombreMetodo.getText();
        if (!validarNombreMetodo(nombreMetodo)) {
            return false;
        }
        proyecto = modeladoServicio.obtenerProyecto(rutaArchivo);
        jpbBarraProgreso.setValue(jpbBarraProgreso.getValue() + 1);
        //1.- compilacion
        if (!compilar(proyecto)) {
            jpbBarraProgreso.setValue(0);
            return false;
        }
        //2.- modelado
        metodo = validacionMetodo(proyecto, nombreMetodo);
        jpbBarraProgreso.setValue(jpbBarraProgreso.getValue() + 1);
        if (metodo == null) {
            jpbBarraProgreso.setValue(0);
            return false;
        }
        //3.- busqueda de soluciones optimas
        solucionesOptimas = busquedaSolucionesServicio.buscarSolucionesOptimas(metodo);
        jpbBarraProgreso.setValue(jpbBarraProgreso.getValue() + 1);
        //4.- Creacion de pruebas
        prueba = pruebaServicio.crearPruebas(metodo, solucionesOptimas);
        jpbBarraProgreso.setValue(jpbBarraProgreso.getValue() + 1);
        //5.- Ejecucion de pruebas
        resultadoPruebas = resultadoPruebas(proyecto, prueba);
        jpbBarraProgreso.setValue(jpbBarraProgreso.getValue() + 1);
        if (resultadoPruebas == null) {
            jpbBarraProgreso.setValue(0);
            return false;
        }
        if (!resultadoPruebas.esResultadoExito()) {
            JOptionPane.showMessageDialog(this, "Ha fallado la ejecuciÃ³n de las pruebas.\n" + resultadoPruebas.getGobbler().getResultadoErrorComando());
            jpbBarraProgreso.setValue(0);
            return false;
        }
        //6.- Resultados
        result = obtenerResultadoDePruebasDeArchivo();
        jpbBarraProgreso.setValue(jpbBarraProgreso.getValue() + 1);
        if (result == null) {
            jpbBarraProgreso.setValue(0);
            return false;
        }
        ResultadosDialog dialog = new ResultadosDialog(this, Boolean.TRUE);
        try {
            dialog.showDialog(result, prueba);
        } catch (EjecucionPruebaException ex) {
            logger.error(ex, ex);
            JOptionPane.showMessageDialog(this, ex.getMessage());
        }
        return true;
    }

    private void procesarCarpetaArchivosSeleccionada(File selectedFile) {
        txtCarpetaArchivos.setText(selectedFile.getAbsolutePath());
        cargarListaArchivosCarpetaSeleccionada(selectedFile);
        activarComponentes(true);
    }

    private void cargarListaArchivosCarpetaSeleccionada(File carpeta) {
        DefaultListModel<String> model;
        model = new DefaultListModel();
        for (File javaFile : carpeta.listFiles((File pathname) -> {
            return pathname.getName().endsWith(Constantes.EXTENSION_JAVA);
        })) {
            model.addElement(javaFile.getName());
        }
        jlListaArchivos.setModel(model);
    }

    private void procesarArchivoSeleccionado(File selectedFile) {
        try {
            compilacionServicio.validarProgramaSeleccionado(selectedFile.getAbsolutePath());

            txtNombreClase.setText(selectedFile.getAbsolutePath());
            cargarCodigoArchivoSeleccionado(selectedFile.getAbsolutePath());
            activarComponentes(true);
        } catch (GeneradorException ex) {
            logger.error(ex, ex);
            JOptionPane.showMessageDialog(this, ex.getMessage());
        }
    }

    private void cargarCodigoArchivoSeleccionado(String absolutePath) {
        try {
            try (FileReader fr = new FileReader(absolutePath)) {
                try (BufferedReader reader = new BufferedReader(fr)) {
                    String linea;
                    while ((linea = reader.readLine()) != null) {
                        txtCodigo.setText(txtCodigo.getText() + linea + "\n");
                    }
                }
            }
        } catch (IOException ex) {
            logger.error(ex, ex);
            JOptionPane.showMessageDialog(this, ex.getMessage());
        }
    }

    private void limpiarFormulario() {
        txtCodigo.setText("");
        txtNombreClase.setText("");
        txtNombreMetodo.setText("");
        jpbBarraProgreso.setValue(0);

        jlListaArchivos.setModel(new DefaultListModel());
        txtCarpetaArchivos.setText("");

        activarComponentes(false);
    }

    private void activarComponentes(boolean valor) {
        btnCancelar.setEnabled(true);
        btnEjecutar.setEnabled(valor);
        txtNombreMetodo.setEditable(valor);
    }

    private Result obtenerResultadoDePruebasDeArchivo() throws HeadlessException {
        Result result;
        try {
            result = pruebaServicio.leerResultadosPruebas();
        } catch (ClassNotFoundException | IOException ex) {
            logger.error(ex, ex);
            JOptionPane.showMessageDialog(this, ex.getMessage());
            result = null;
        }
        return result;
    }

    private ResultadoComando resultadoPruebas(RecursoJava proyecto, Prueba prueba) {
        ResultadoComando resultadoPruebas;
        try {
            resultadoPruebas = pruebaServicio.ejecutarPrueba(proyecto, prueba);
        } catch (EjecucionPruebaException ex) {
            logger.error(ex, ex);
            JOptionPane.showMessageDialog(this, ex.getMessage());
            resultadoPruebas = null;
        }
        return resultadoPruebas;
    }

    private Metodo validacionMetodo(RecursoJava proyecto, String nombreMetodo) throws HeadlessException {
        Metodo metodo;
        Clase clase;
        try {
            clase = (Clase) proyecto;
            metodo = modeladoServicio.obtenerMetodoEjecucion(clase, nombreMetodo);
        } catch (ModeladoException ex) {
            logger.error(ex, ex);
            JOptionPane.showMessageDialog(this, ex.getMessage());
            metodo = null;
        }
        return metodo;
    }

    private boolean validarNombreMetodo(String nombreMetodo) throws HeadlessException {
        if (!GeneradorUtil.esCadenaValida(nombreMetodo)) {
            JOptionPane.showMessageDialog(this, "Debe ingresar un nombre de metodo");
            return false;
        }
        if (metodoEsMetodoDefault(nombreMetodo)) {
            JOptionPane.showMessageDialog(this, "El nombre de metodo ingresado no es valido");
            return false;
        }
        return true;
    }

    private Boolean compilar(RecursoJava proyecto) {
        ResultadoComando resultado;
        Boolean compilar;
        String msg;
        try {
            //1.- compilacion
            resultado = compilacionServicio.compilar(proyecto);
            compilar = resultado.esResultadoExito();
            if (!compilar) {
                msg = resultado.getGobbler().getResultadoComando().toString();
                if (!GeneradorUtil.esCadenaValida(msg)) {
                    msg = resultado.getGobbler().getResultadoErrorComando().toString();
                }
                JOptionPane.showMessageDialog(this, "No se ha podido compilar la clase \"" + proyecto.getNombre() + "\" correctamente.\nError: \n " + msg);
            }
        } catch (CompilacionException ex) {
            compilar = Boolean.FALSE;
            logger.error(ex, ex);
            JOptionPane.showMessageDialog(this, ex.getMessage());
        }
        return compilar;
    }

    private boolean metodoEsMetodoDefault(String nombreMetodo) {
        return nombreMetodo.equalsIgnoreCase("equals")
                || nombreMetodo.equalsIgnoreCase("tostring")
                || nombreMetodo.equalsIgnoreCase("getclass")
                || nombreMetodo.equalsIgnoreCase("notify")
                || nombreMetodo.equalsIgnoreCase("notifyall")
                || nombreMetodo.equalsIgnoreCase("wait")
                || nombreMetodo.equalsIgnoreCase("hashcode");
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCancelar;
    private javax.swing.JButton btnEjecutar;
    private javax.swing.JButton btnSeleccionarCarpetaArchivos;
    private javax.swing.JButton btnSeleccionarClase;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JList<String> jlListaArchivos;
    private javax.swing.JMenu jmArchivo;
    private javax.swing.JMenuItem jmiAcercaDe;
    private javax.swing.JMenuItem jmiCargar;
    private javax.swing.JMenuItem jmiConfigurar;
    private javax.swing.JMenuItem jmiGuardar;
    private javax.swing.JMenuItem jmiSeleccionar;
    private javax.swing.JProgressBar jpbBarraProgreso;
    private javax.swing.JTabbedPane jtbPanelTabs;
    private javax.swing.JTextField txtCarpetaArchivos;
    private javax.swing.JTextArea txtCodigo;
    private javax.swing.JTextField txtNombreClase;
    private javax.swing.JTextField txtNombreMetodo;
    // End of variables declaration//GEN-END:variables

    private int obtenerMaximo(File[] listaArchivos, String rutaCarpeta) {
        String nombreClase;
        int i = 0;

        for (File javaFile : listaArchivos) {
            nombreClase = FilenameUtils.removeExtension(javaFile.getName());
            i++;
            //OBTENER LOS METODOS
            try {
                List<Method> lista = modeladoServicio.obtenerMetodosDeClaseEjecucion(rutaCarpeta, nombreClase);
                i = i + (lista.size() * 5);
            } catch (ModeladoException ex) {
                logger.error(ex, ex);
                JOptionPane.showMessageDialog(this, ex.getMessage());
            }
        }
        return i;
    }

}
